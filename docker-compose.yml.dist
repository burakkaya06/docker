version: '3'
services:

  global:
    build: ./global
    tty: true
    container_name: global
    volumes:
      - ./global:/global
    networks:
      net:

  sentry:
    container_name: sentry
    image: sentry
    restart: always
    links:
      - redis
      - postgres
    ports:
      - ${SENTRY_PORT}:9000
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:
        ipv4_address: ${SENTRY_HOST}

  cron:
    container_name: sentry-cron
    image: sentry
    links:
      - redis
      - postgres
    command: "sentry run cron"
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:

  worker:
    container_name: sentry-worker
    image: sentry
    links:
      - redis
      - postgres
    command: "sentry run worker"
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    container_name: rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    ports:
      - ${RABBITMQ_PORT}:15672
      - ${RABBITMQ_PORT2}:5672
    networks:
      net:
        ipv4_address: ${RABBITMQ_HOST}

  adminer:
    image: adminer
    restart: always
    container_name: adminer
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      net:
        ipv4_address: ${ADMINER_HOST}
    logging:
      options:
        max-size: 50m

  elasticsearch_graylog:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.3
    restart: always
    container_name: elasticsearch_graylog
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
#       Disable X-Pack security: https://www.elastic.co/guide/en/elasticsearch/reference/5.6/security-settings.htmlgeneral-security-settings
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${ELASTIC_GRAYLOG_DATA}:/bitnami/elasticsearch/data
    networks:
      net:
        ipv4_address: ${ELASTIC_GRAYLOG_HOST}
    ports:
      - ${ELASTIC_GRAYLOG_PORT}:9200

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.2
    restart: always
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - cluster.initial_master_nodes=elasticsearch
      - "ES_JAVA_OPTS=-Xms256M -Xmx256M"
    ulimits:
      nproc: 65535
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - ALL
     privileged: true
    networks:
      net:
        ipv4_address: ${ELASTICSEARCH_HOST}
    ports:
      - ${ELASTICSEARCH_PORT}:9200

  kibana:
    container_name: kibana
    image: 'kibana:7.3.2'
    environment:
      - kibana.index=.kibana1
      - elasticsearch.hosts=[http://elasticsearch:9200, 172.16.16.113:10200]
        volumes:
          - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    links:
      - elasticsearch
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      net:
        ipv4_address: ${KIBANA_HOST}


  elastichq:
    container_name: elastichq
    image: elastichq/elasticsearch-hq
    restart: always
    environment:
      - HQ_DEFAULT_URL=${ELASTICHQ_DEFAULT_URL}
    ports:
      - ${ELASTICHQ_PORT}:5000
    networks:
      net:
        ipv4_address: ${ELASTICHQ_HOST}

    redis-commander:
      container_name: redis-commander
      hostname: redis-commander
      build: ./redis-commander
      restart: always
      environment:
      - REDIS_HOST=172.28.1.4
      - REDIS_PASSWORD=redis
      ports:
      - "8081:80"
      networks:
        net:
          ipv4_address: 172.28.1.9

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASS=${MONGODB_PASS}
    volumes:
      - './mongo/db:/data/db'
    ports:
      - ${MONGODB_PORT}:27017
    networks:
      net:
        ipv4_address: ${MONGODB_HOST}

  graylog:
    image: graylog/graylog:2.4.0-1
    restart: always
    container_name: graylog
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper  Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_WEB_ENDPOINT_URI=http://127.0.0.1:9000/api
    links:
      - mongodb:mongo
      - elasticsearch_graylog:elasticsearch
    depends_on:
      - mongodb
      - elasticsearch_graylog
    ports:
      - ${GRAYLOG_PORT}:9000
      - 514:514
      - 514:514/udp
      - 12201:12201
      - 12201:12201/udp
    networks:
      net:
        ipv4_address: ${GRAYLOG_HOST}

  postgres:
    image: postgres
    container_name: postgres
    environment:f
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - './postgres:/data/postgres'
    ports:
      - ${POSTGRES_PORT}:5432
    restart: always
    networks:
      net:
        ipv4_address: ${POSTGRES_HOST}


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - './pgadmin:/root/.pgadmin'
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    restart: always
    networks:
      net:
        ipv4_address: ${PGADMIN_HOST}


  node:
    image: node:latest
    container_name: node
    tty: true
    restart: always
    networks:
      net:
        ipv4_address: 172.28.1.5
    ports:
      - '3001:3001'


  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    networks:
      net:
        ipv4_address: ${REDIS_HOST}
    volumes:
      - './etc/redis.conf:/usr/local/etc/redis/redis.conf'
    environment:
      - REDIS_DEFAULT_PASSWORD=${REDIS_PASSWORD}
      - MASTER_DEFAULT_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379

  db:
    image: 'mysql:5.7'
    container_name: db
    restart: always
    networks:
      net:
        ipv4_address: ${MYSQL_HOST}
    volumes:
      - './mysql/initdb/:/docker-entrypoint-initdb.d'
      - './mysql/data/:/var/lib/mysql'
    command: mysqld --sql_mode="NO_ENGINE_SUBSTITUTION"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306


  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    networks:
      net:
        ipv4_address: ${PHPMYADMIN_HOST}
    environment:
      PMA_ARBITRARY: 1
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./php72/php.ini:/usr/local/etc/php/php.ini
    ports:
      - ${PHPMYADMIN_PORT}:80
    links:
      - 'db:db'

  httpd:
    build: ./httpd
    container_name: httpd
    restart: always
    tty: true
    networks:
      net:
        ipv4_address: ${APACHE_HOST}
    links:
      - db
      - php56
      - php70
      - php71
      - php72
    ports:
      - ${APACHE_PORT}:80
      - ${APACHE_PORT2}:443
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html
      - ${APACHE_SITES_ENABLED}:/etc/apache2/sites-enabled

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    networks:
      net:
        ipv4_address: ${NGINX_HOST}
    links:
      - 'db:db'
      - php56
      - php70
      - php71
      - php72
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_PORT2}:443
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx/conf.d/
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - './logs/:/var/log/nginx/'
      - ${NGINX_SSL_PATH}:/root/Ssl/


  php72:
    build:
      context: ./php72
      args:
        - XDEBUG_PORT=${XDEBUG_PORT}
        - XDEBUG_HOST=${XDEBUG_HOST}
    tty: true
    container_name: php72
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php70:
    build:
      context: ./php70
      args:
        - XDEBUG_PORT=${XDEBUG_PORT}
        - XDEBUG_HOST=${XDEBUG_HOST}
    tty: true
    container_name: php70
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php74:
    build:
      context: ./php74
      args:
        - XDEBUG_PORT=${XDEBUG_PORT}
        - XDEBUG_HOST=${XDEBUG_HOST}
    tty: true
    container_name: php74
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php71:
    build:
      context: ./php71
      args:
        - XDEBUG_PORT=${XDEBUG_PORT}
        - XDEBUG_HOST=${XDEBUG_HOST}
    tty: true
    container_name: php71
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php56:
    build:
      context: ./php56
      args:
        - XDEBUG_PORT=${XDEBUG_PORT}
        - XDEBUG_HOST=${XDEBUG_HOST}
    tty: true
    container_name: php56
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:


networks:
    net:
      ipam:
        driver: default
        config:
          - subnet: 172.28.0.0/16
volumes:
  elasticsearch_data:
    driver: local
  global:
    driver: local